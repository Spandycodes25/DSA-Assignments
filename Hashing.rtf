{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //Hashing\
\
\pard\pardeftab720\ri-340\partightenfactor0

\f1 \cf0 #include <iostream>\uc0\u8232 #include <string>\u8232 \u8232 using namespace std;\u8232 #define size 10\u8232 \u8232 class Hash\u8232 \{\u8232 \'a0private:\u8232 \'a0 \'a0 struct tel\u8232 \'a0 \'a0 \{\u8232 \'a0 \'a0 \'a0 \'a0 string emp_name;\u8232 \'a0 \'a0 \'a0 \'a0 string comp_name;\u8232 \'a0 \'a0 \'a0 \'a0 int id;\u8232 \'a0 \'a0 \}tel[size];\u8232 \'a0 \'a0\u8232 \'a0 \'a0 public:\u8232 \'a0 \'a0 \'a0 \'a0 void insert();\u8232 \'a0 \'a0 \'a0 \'a0 void display();\u8232 \'a0 \'a0 \'a0 \'a0 void collision_lp(int,string,string,int);\u8232 \'a0 \'a0 \'a0 \'a0 void collision_qp(int,string,string,int);\u8232 \'a0 \'a0 \'a0 \'a0 //void hash_fun(long int);\u8232 \'a0 \'a0 \'a0 \'a0\u8232 \'a0 \'a0 \'a0 \'a0 //constructor to initialize values\u8232 \'a0 \'a0 \'a0 \'a0 Hash()\u8232 \'a0 \'a0 \'a0 \'a0 \{\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 for(int i=0;i<size;i++)\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \{\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 tel[i].id=0;\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 tel[i].emp_name="--";\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 tel[i].comp_name="--";\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \}\u8232 \'a0 \'a0 \'a0 \'a0 \}\u8232 \};\u8232 \u8232 void Hash::insert()\u8232 \{\u8232 \'a0 \'a0 int choice;\u8232 \'a0 \'a0 string name;\u8232 \'a0 \'a0 string cname;\u8232 \'a0 \'a0 int id_no;\u8232 \'a0 \'a0 int loc;\u8232 \'a0 \'a0 cout<<"Enter employee id: ";\u8232 \'a0 \'a0 cin>>id_no;\u8232 \'a0 \'a0 cout<<"\\nEnter name: ";\u8232 \'a0 \'a0 cin>>name;\u8232 \'a0 \'a0 cout<<"Enter company name: ";\u8232 \'a0 \'a0 cin>>cname;\u8232 \'a0 \'a0\u8232 \'a0 \'a0 loc=id_no%size;\u8232 \'a0 \'a0\u8232 \'a0 \'a0 //if(tel[loc].id==0)\u8232 \'a0 \'a0\u8232 \'a0 \'a0 \'a0 \'a0 if(tel[loc].id==0)\u8232 \'a0 \'a0 \'a0 \'a0 \{\u8232 \'a0 \'a0 \'a0 \'a0tel[loc].emp_name=name;\u8232 \'a0 \'a0 \'a0 \'a0tel[loc].comp_name=cname;\u8232 \'a0 \'a0 \'a0 \'a0tel[loc].id=id_no;\u8232 \'a0 \'a0 \'a0 \'a0display();\u8232 \'a0 \'a0 \'a0 \'a0 \}\u8232 \'a0 \'a0\u8232 \'a0 \'a0 \'a0else\u8232 \'a0 \'a0 \{\u8232 \'a0 \'a0 \'a0 \'a0 cout<<"\\nCollision occured\\n";\u8232 \'a0 \'a0 \'a0 \'a0 cout<<"\\n1.Linear probing\\n2.Quadratic probing: ";\u8232 \'a0 \'a0 \'a0 \'a0 cin>>choice;\u8232 \'a0 \'a0 \'a0 \'a0 switch(choice)\u8232 \'a0 \'a0 \'a0 \'a0 \{\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 case 1:\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 collision_lp(loc,name,cname,id_no);\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 cout<<"\\n";\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 display();\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 break;\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 case 2:\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 collision_qp(loc,name,cname,id_no);\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 cout<<"\\n";\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 display();\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 break;\u8232 \'a0 \'a0 \'a0 \'a0 \}\u8232 \'a0 \'a0 \}\u8232 \}\u8232 void Hash::collision_lp(int Loc,string Name,string Cname,int id_No)\u8232 \{\u8232 int k,new_loc;\u8232 for(k=0;k<size;k++)\u8232 \{\u8232 new_loc=(Loc+k)%size;\u8232 if(tel[new_loc].id==0)\u8232 \'a0 \'a0 \'a0 \'a0 \{\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 tel[new_loc].emp_name=Name;\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 tel[new_loc].comp_name=Cname;\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 tel[new_loc].id=id_No;\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 break;\u8232 \'a0 \'a0 \'a0 \'a0 \}\u8232 \u8232 \}\u8232 \u8232 \u8232 \}\u8232 \u8232 void Hash::collision_qp(int Loc,string Name,string Cname,int id_No)\u8232 \{\u8232 int k,new_loc;\u8232 for(k=0;k<size;k++)\u8232 \{\u8232 new_loc=(Loc+(k*k))%size;\u8232 if(tel[new_loc].id==0)\u8232 \'a0 \'a0 \'a0 \'a0 \{\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 tel[new_loc].emp_name=Name;\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 tel[new_loc].comp_name=Cname;\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 tel[new_loc].id=id_No;\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 break;\u8232 \'a0 \'a0 \'a0 \'a0 \}\u8232 \u8232 \}\u8232 \u8232 \u8232 \}\u8232 \u8232 void Hash::display()\u8232 \{\u8232 int i;\u8232 cout<<"Employee id\\t\\tEmployee name\\t\\tCompany name"<<endl;\u8232 for(i=0;i<size;i++)\u8232 \{\u8232 \'a0 \'a0 cout<<tel[i].id <<"\\t\\t\\t" <<tel[i].emp_name<<"\\t\\t\\t"<<tel[i].comp_name<<endl;\u8232 \u8232 \}\u8232 \u8232 \u8232 \}\u8232 \u8232 int main()\u8232 \{\u8232 \'a0 \'a0 int j,elements;\u8232 \'a0 \'a0 cout<<"Enter no of elements: ";\u8232 \'a0 \'a0 cin>>elements;\u8232 \'a0 \'a0 Hash obj;\u8232 \'a0 \'a0 for(j=0;j<elements;j++)\u8232 \'a0 \'a0 \{\u8232 \'a0 \'a0 \'a0 obj.insert();\u8232 \'a0 \'a0 \}\u8232 \'a0 \'a0 cout<<"\\nFinal hash table is:\\n";\u8232 \'a0 \'a0 obj.display();\u8232 \'a0 \'a0\u8232 \'a0 \'a0\u8232 \u8232 \'a0 \'a0 return 0;\u8232 \}\
}